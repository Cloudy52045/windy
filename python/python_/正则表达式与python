re模块：核心函数与方法
————    正则表达式(regex object)对象和正则匹配对象(regex match object)
——    match()和search()以及compile()函数
————    仅仅是re模块函数
compile(pattern,flags=0)          使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象
————    re模块函数和正则表达式对象的方法
match(pattern,string,flags=0)     尝试使用带有可选的标记的正则表达式来匹配字符串，如果匹配成功，就返回匹配对象，如果匹配失败，就返回None
seartch(pattern,string,flags=0)   使用可选标记搜索字符串中第一次出现的正则表达式模式，如果匹配成功，就返回匹配对象，如果匹配失败，就返回None
findall(pattern,string[,flags])   查找字符串中所有的（非重复）出现的正则表达式模式，并返回一个匹配列表
filditer(pattern,string[,flags])  与findall()函数相同，但返回的不是一个列表，而是一个迭代器，对于每一次匹配，迭代器都返回一个匹配对象
split(pattern,string,max=0)       根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功匹配的列表，分割最多操作max次（默认分割所有匹配成功的位置）
————    re模块函数和正则表达式对象方法
sub(pattern,syring,count=0)       使用reql替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就将替换所有出现的位置，（另见subn()函数，该函数返回替换操作的数目）
purge()                           清除隐式编译的正则表达式
————    常用的匹配对象方法
group(num=0)                      返回整个匹配对象，或者编号为num的特定子组
groups(default=None)              返回一个包含所有匹配子组的元组（如果没有成功匹配，则返回一个空元组）
groupdict(default=None)           返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键（如果没有匹配，就返回一空字典）
————    常用的模块属性
re.I、re.IGNORECASE       不区分大小写的匹配
re.L、re.LOCALE           根据所使用的本地语言环境通过\w、\W、\b、\B、\s、\S实现匹配
re.M、re.MULTILINE        ^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾
re.S、re.DOTALL           "."通常匹配除了"\n"（换行符）之外的所有单个字符；该标记表示"."能够匹配全部字符
re.x、re.VERBOSE          通过反斜线转义，否则所有的空格加上#（以及在该行中所有后续文字）都被忽略，除非在一个字符类中或者允许注释并且提高可读性

————    匹配对象以及group()和groups()方法
——    group()要么返回整个匹配对象，要么根据要求返回特定子组
——    groups()则返回一个包含唯一或者全部子组的元组
——    如果没有子组的要求，group()仍然返回整个匹配，groups()返回一个空元组

————    使用match()方法匹配字符串
——  match()函数试图从字符串的起始部分对模式进行匹配，如果匹配成功，就返回对象，如果匹配失败就返回None
——  匹配对象的group()方法能够用于显示那个成功的匹配

————————————————
m = re.match('foo','foo')   #模式匹配字符串
if m is not None:           #如果匹配成功，就输出匹配内容
m.group()

————————————————
re.match('foo','foo on the table').group()

————    使用search()在一个字符串中查找模式（搜素与匹配的对比）
——    search()函数会用的字符串参数，在任意位置给定正则表达式模式搜索第一次出现的匹配情况。如果成功搜索到，就会返回一个匹配对象，否则，返回None

————————————————
re.match('foo','seafoo')    #匹配失败
————————————————
re.search('foo','seafoo')   #搜索成功，匹配失败

————    匹配多个字符串
————————————————
bt = 'bat|bet|bit'
m = re.match(bt,'bat')  #匹配成功
m = re.search(bt,'he bit me!')    #搜索成功

————    匹配单个字符
——  (.)点号不能匹配一个换行符\n或者非字符，也就是说，一个空字符
————————————————
anyend = '.end'
m = re.match(anyend,'bend')   # 点号匹配'b'
m = re.match(anyend,'end') m = re.match(anyend,'\nend')    #不匹配任何字符和除了\n之外的任何字符

————————————————
patt314 = '3.14'      # 表示正则表达式里面的点号
pi_patt = '3\.14'     # 表示字面量的点号
m = re.match(pi_patt,'3.14')  # 精确匹配
m = re.match(patt314,'3,14')  # 点号匹配'.'
m = re.match(patt314,'3014')  # 点号匹配'0'
————    创建字符集（[]）
————————————————
m = re.match('[cr][23][dp][o2])','c3po')   # 匹配'c3po'
m = re.match('c2r2|c3po','c2r2')           # 匹配'c2r2

————    重复、特殊字符以及分组
————————————————
patt = '\w+@(\w+\.)?\w+\.com'
re.match(patt,'nobody@xxx.com').group()
re.match(patt,'nobody@www.xxx.com').group()
————————————————
patt = '\w+@(\w+\.)*\w+\.com'
re.match(patt,'nobody@www.xxx.yyy.zzz.com')
————————————————
m = re.match('\w\w\w-\d\d\d','abc-123')
if m in not None: m.group()

————    返回匹配对象的子组
————————————————
m = re.match('(\w\w\w)-(\d\d\d'),'abc-123')
m.group()         # 完整匹配
m.group(1)--'abc'        # 子组 1
m.group(2)--'123'        # 子组 2
m.groups()        # 全部子组 

——————    分组排列
m = re.match('(a)(b)','ab')    # 两个子组
m.group()           # 完整匹配
m.group(1)--'a'     # 子组 1
m.group(2)--'b'     # 子组 2
m.group()           # 全部子组
———————————————
m = re.match('(a(b))','ab')     # 两个子组
m.group(1)--'ab'    # 子组 1
m.group(2)--'b'     # 子组 2

————    匹配字符串的起始和结尾以及单词边界
———————————————
m = re.search(r'\bthe','bite the dog')--'the'    # 在边界
m = re.search(r'\bthe','bitethe dog')--''     # 不在边界
m = re.search(r.\Bthe','bitethe dog')--'the'  # 不在边界
————    使用fnldall()和finditer()查找每一次出现的位置
—— findall()查询字符串中某个正则表达式模式全部的非重复出现情况，返回一个列表，没有匹配，就返回一个空列表
———————————————
re.findall('car','carry the barcardi to the car')
['car','car','car']

————————————————
s = 'This and That'
re.findall(r'(th\w+)and(th\w+)',s,re.I)--  [('This','That')]         # re.I 不区分大小写的匹配
re.finditer(r'(th\w+)and(th\w+),s,re.I).next().groups()--  ('This','That')
re.finditer(r'(th\w+)and(th\w+),s,re.I).next().groups(1)--  ('This')
re.finditer(r'(th\w+)and(th\w+),s,re.I).next().groups(2)--  ('That')
[g.groups() for g in re.finditer(r'(th\w+)and(th\w+)',s,re,I)]--  [('This','That')]

————    多重匹配
————————————————
s = 'This and That'
re.findall(r'(th\w+)',s,re.I)--  ['This','That']
it = re.findall(r'(th\w)',s,re.I)
g = it.next()
g.groups()--    ('This')
g.group(1)--    'This'
g = it.next()
g.groups()--     ('that',)
g.group(1)--     'that'
g.group(1) for g in re.finditer(r'(th\w+)',s,re.I)--    ['This','that'
--    使用finditer()函数完成的所有额外的工作都旨在获取它的输出来匹配findall()的输出

----    使用sub()和subn()搜索与替换
--    sub()与subn()一致,但subn()函数返回一个表示替换的总数,替换后的字符串和表示替换总数一起作为一个拥有两个元素的元组返回
-----------------
re.sub('X','Mr. Smith','attn:X\n\nDear X,\n')
'attn:Mr. Smith\012\012Dear Mr. Smith,\012'
re.subn('X','Mr. Smith','attn:X\n\nDear X,\n')
('attn:Mr. Smith\012\012Dear Mr. Smith,\012',2)
print(re.sub('X','Mr. Smith','attn:X\n\nDear X,\n'))
attn: Mr. Smith
Dear Mr. Smith
re.sub('[ae]','x','abcdef')--   'xbcdxf'
re.subn('[ae]','x','abcdef')--   ('xbcdxf',2)

----    将美式的日期表示法MM/DD/YY{,YY}格式转换为其他国家常用的格式DD/MM/YY{,YY}
-----------------
re.sub(r'(\d{1,2})/(\d{1,2})/(\d{2}|\d{4})',r'\2/\1/\3','2/20/91')--    '20/2/91'
re.sub(r'(\d{1,2})/(\d{1,2})/(\d{2}|\d{4})',r'\2/\1/\3','2/20/1991')--    '20/2/1991'

----    在限定模式上使用split()分隔字符串
-----------------
import re
DATA = (
  'Mountain View, CA 9400',
  'Sunnyvale, CA',
  'Los Altos, CA',
  'Cupertino 95014',
  'Palo Alto CA',
  )
for datum in DATA:
  print re.split(',|(?=(?:\d{5}|[A-Z]{2}))',datum)
['Mountain View','CA','9400']

















